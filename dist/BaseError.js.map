{"version":3,"sources":["../src/BaseError.js"],"names":["BaseError","Error","constructor","error","message","fileName","lineNumber","String","toString","prototype","console","inline","name","inspect","custom","depth","options","Proxy","get","target","property","receiver","hasOwnProperty","Reflect","Symbol","toStringTag"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;;;;;;;AAQO,MAAMA,SAAN,SAAwBC,KAAxB,CAA8B;;AAQnC;;;;;;AAMAC,cAAYC,KAAZ,EAAmC;AACjC,UAAMA,MAAMC,OAAN,IAAiBD,KAAvB,EAA8BA,MAAME,QAApC,EAA8CF,MAAMG,UAApD;;AAEA,SAAKH,KAAL,GAAaA,iBAAiBI,MAAjB,GAA0B,IAA1B,GAAiCJ,KAA9C;;AAEA,QAAI,KAAKK,QAAL,KAAkBP,MAAMQ,SAAN,CAAgBD,QAAtC,EAAgD;AAC9CE,cAAQP,KAAR,CAAcQ,gBAAO;kBACT,KAAKT,WAAL,CAAiBU,IAAK;;;OADlC;AAKD;;AAED,QAAIC,cAAQC,MAAZ,EAAoB;AAClB,WAAKD,cAAQC,MAAb,IAAuB,CAACC,KAAD,EAAQC,OAAR,KAAoB,KAAKR,QAAL,EAA3C;AACD,KAFD,MAGK;AACH,WAAKK,OAAL,GAAe,CAACE,KAAD,EAAQC,OAAR,KAAoB,KAAKR,QAAL,EAAnC;AACD;;AAED,WAAO,IAAIS,KAAJ,CAAU,IAAV,EAAgB;AACrBC,UAAIC,MAAJ,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgC;AAC9B,YAAI,KAAKlB,KAAL,IAAc,KAAKA,KAAL,CAAWmB,cAAX,CAA0BF,QAA1B,CAAlB,EAAuD;AACrD,iBAAO,KAAKjB,KAAL,CAAWiB,QAAX,CAAP;AACD,SAFD,MAGK;AACH,iBAAOG,QAAQL,GAAR,CAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,QAA9B,CAAP;AACD;AACF;AARoB,KAAhB,CAAP;AAUD;;AAED;;;;;;;AA7CA;;;;;AAmDA,OAAKG,OAAOC,WAAZ,IAA2B;AACzB,WAAO,KAAKvB,WAAL,CAAiBU,IAAxB;AACD;AAtDkC;;QAAxBZ,S,GAAAA,S;kBAyDEA,S","file":"BaseError.js","sourceRoot":"src","sourcesContent":["// @flow\n\nimport { inline } from 'ne-tag-fns'\nimport { inspect } from 'util'\n\n/**\n * The BaseError class provides a simply stock way to wrap errors in a more\n * concise error type for use within the project. All normal error fields are\n * passed through to the wrapped error class if the default error contains\n * the requested property; failing that, it is passed on to the subclass.\n *\n * It is highly recommended\n */\nexport class BaseError extends Error {\n  /**\n   * The error this error wraps.\n   *\n   * @type {Error}\n   */\n  error: Error\n\n  /**\n   * Creates a new BaseError type that wraps either an existing error or \n   * uses this error instantiation with the given error message. \n   * \n   * @constructor\n   */\n  constructor(error: Error | string) {\n    super(error.message || error, error.fileName, error.lineNumber)\n\n    this.error = error instanceof String ? this : error\n\n    if (this.toString === Error.prototype.toString) {\n      console.error(inline`\n        Class \\`${this.constructor.name}\\` does not correctly implement or\n        override the \\`toString()\\` function in order to describe the cause\n        of this named error. Please remedy this.\n      `)\n    }\n\n    if (inspect.custom) {\n      this[inspect.custom] = (depth, options) => this.toString()\n    }\n    else {\n      this.inspect = (depth, options) => this.toString()\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n        if (this.error && this.error.hasOwnProperty(property)) {\n          return this.error[property]\n        }\n        else {\n          return Reflect.get(target, property, receiver)\n        }\n      }\n    })\n  }\n\n  /**\n   * All BaseError children will show `[object <class name>]` as their internal \n   * class naming when used with `Object.prototype.toString.call` or `apply`.\n   * \n   * @type {String}\n   */\n  get [Symbol.toStringTag]() {\n    return this.constructor.name\n  }\n}\n\nexport default BaseError\n"]}