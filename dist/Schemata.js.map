{"version":3,"sources":["../src/Schemata.js"],"names":["stripResolversFromSchema","DefaultFieldMergeResolver","DefaultDirectiveMergeResolver","DefaultEnumMergeResolver","DefaultUnionMergeResolver","DefaultScalarMergeResolver","normalizeSource","schema","resolvers","type","typeName","typeDirectives","field","fieldName","fieldArgs","fieldDirectives","_schema","context","resolve","TYPEDEFS_KEY","Symbol","GRAPHIQL_FLAG","for","MAP","EXE","wmkResolvers","Object","wmkSchema","leftType","leftField","rightType","rightField","leftDirective","rightDirective","leftValue","rightValue","leftUnion","rightUnion","leftScalar","leftConfig","rightScalar","rightConfig","DefaultConflictResolvers","fieldMergeResolver","directiveMergeResolver","enumValueMergeResolver","typeValueMergeResolver","scalarMergeResolver","subTypeResolverMap","Map","set","combineTypeAndSubType","subTypeName","lType","rType","conflictResolvers","rSubType","lSubType","find","f","name","value","push","resolver","get","resultingSubType","index","fields","indexOf","splice","pareTypeAndSubType","typeDefs","wrap","Error","source","body","sdl","toString","Schemata","from","String","constructor","WeakMap","species","toStringTag","ast","parse","graphiql","keys","length","executableSchema","buildSchema","error","isRootType","t","undefined","Class","forEachField","astNode","rootValue","buildResolvers","schemaResolverFor","valid","_type","getType","_field","getFields","schemaFieldByName","validSchema","astTypeByName","validSDL","definitions","astFieldByName","hasFlattenedResolvers","asts","query","mutation","subscription","mergeSDL","schemaLanguage","lAST","rAST","_scalarFns","assign","a","kind","endsWith","substring","lScalar","lScalarConfig","rScalar","rScalarConfig","_scalarConfig","merged","gql","print","pareSDL","resolverMap","len","values","types","result","mergeSchema","mergeResolvers","schemata","flattenRootResolversOrFirstParam","extendWith","rootType","hasAnExecutableSchema","e","clearResolvers","clearSchema","inspect","valueOf","forEachOf","fn","suppliedSchema","forEachType","forEachInputObjectType","INPUT_TYPES","forEachUnion","forEachEnum","forEachInterface","forEachScalar","forEachRootType","forEachTypeField","forEachInterfaceField","forEachInputObjectField","run","contextValue","variableValues","operationName","fieldResolver","graphqlSync","runAsync","graphql","showError","schemaOpts","require","ALL","TYPES","INTERFACES","ENUMS","UNIONS","SCALARS","ROOT_TYPES","HIDDEN"],"mappings":"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","file":"Schemata.js","sourceRoot":"src","sourcesContent":["// @flow\n\nimport type {\n  ASTNode,\n  BuildSchemaOptions,\n  DirectiveNode,\n  EnumValueNode,\n  ExecutionResult,\n  FieldNode,\n  GraphQLFieldResolver,\n  GraphQLScalarTypeConfig,\n  NamedTypeNode,\n  ObjMap,\n  ParseOptions,\n  ScalarTypeDefinitionNode,\n  Source,\n} from 'graphql'\n\nimport { GraphQLSchema, GraphQLObjectType, printSchema } from 'graphql'\nimport { inline } from 'ne-tag-fns'\nimport merge from 'deepmerge'\n\nimport {\n  forEachOf,\n  forEachField,\n\n  ALL,\n  TYPES,\n  INTERFACES,\n  ENUMS,\n  UNIONS,\n  SCALARS,\n  ROOT_TYPES,\n  HIDDEN\n} from './forEachOf'\n\nimport type { ForEachOfResolver, ForEachFieldResolver } from './forEachOf'\n\n/**\n * Walk the supplied GraphQLSchema instance and retrieve the resolvers stored\n * on it. These values are then returned with a [typeName][fieldName] pathing\n *\n * @param {GraphQLSchema} schema an instance of GraphQLSchema\n * @return {Object} an object containing a mapping of typeName.fieldName that\n * links to the resolve() function it is associated within the supplied schema\n */\nexport function stripResolversFromSchema(\n  schema: GraphQLSchema\n): ?Object {\n  let resolvers = {}\n\n  if (!schema) {\n    return null\n  }\n\n  forEachField(schema, (\n    type,\n    typeName,\n    typeDirectives,\n    field,\n    fieldName,\n    fieldArgs,\n    fieldDirectives,\n    _schema,\n    context\n  ) => {\n    if (field.resolve) {\n      resolvers[typeName] = resolvers[typeName] || {}\n      resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {}\n      resolvers[typeName][fieldName] = field.resolve\n    }\n  })\n\n  return resolvers\n}\n\n/**\n * The callback for collision when a field is trying to be merged with an\n * existing field.\n *\n * @param {ASTNode} leftType the ASTNode, usually denoting a type, that will\n * receive the merged type's field from the right\n * @param {FieldNode} leftField the FieldNode denoting the value that should\n * be modified or replaced\n * @param {ASTNode} rightType the ASTNode containing the field to be merged\n * @param {FieldNode} rightField the FieldNode requesting to be merged and\n * finding a conflicting value already present\n * @return {FieldNode} the field to merge into the existing schema layout. To\n * ignore changes, returning the leftField is sufficient enough. The default\n * behavior is to always take the right hand value, overwriting new with old\n */\nexport type FieldMergeResolver = (\n  leftType: ASTNode,\n  leftField: FieldNode,\n  rightType: ASTNode,\n  rightField: FieldNode\n) => FieldNode\n\n/**\n * The callback for collision when a directive is trying to be merged with an\n * existing directive.\n *\n * @param {ASTNode} leftType the ASTNode, usually denoting a type, that will\n * receive the merged type's directive from the right\n * @param {DirectiveNode} leftDirective the DirectiveNode denoting the value\n * that should be modified or replaced\n * @param {ASTNode} rightType the ASTNode containing the directive to be merged\n * @param {DirectiveNode} rightDirective the DirectiveNode requesting to be\n * merged and finding a conflicting value already present\n * @return {DirectiveNode} the directive to merge into the existing schema\n * layout. To ignore changes, returning the leftDirective is sufficient enough.\n * The default behavior is to always take the right hand value, overwriting\n * new with old\n */\nexport type DirectiveMergeResolver = (\n  leftType: ASTNode,\n  leftDirective: DirectiveNode,\n  rightType: ASTNode,\n  rightDirective: DirectiveNode\n) => DirectiveNode\n\n/**\n * The callback for collision when a enum value is trying to be merged with an\n * existing enum value of the same name.\n *\n * @param {ASTNode} leftType the ASTNode, usually denoting a type, that will\n * receive the merged type's enum value from the right\n * @param {EnumValueNode} leftValue the EnumValueNode denoting the value\n * that should be modified or replaced\n * @param {ASTNode} rightType the ASTNode containing the enum value to be\n * merged\n * @param {EnumValueNode} rightValue the EnumValueNode requesting to be\n * merged and finding a conflicting value already present\n * @return {EnumValueNode} the enum value to merge into the existing schema\n * layout. To ignore changes, returning the leftValue is sufficient enough.\n * The default behavior is to always take the right hand value, overwriting\n * new with old\n */\nexport type EnumMergeResolver = (\n  leftType: ASTNode,\n  leftValue: EnumValueNode,\n  rightType: ASTNode,\n  rightValue: EnumValueNode\n) => EnumValueNode\n\n/**\n * The callback for collision when a union type is trying to be merged with an\n * existing union type of the same name.\n *\n * @param {ASTNode} leftType the ASTNode, usually denoting a type, that will\n * receive the merged type's union type from the right\n * @param {NamedTypeNode} leftValue the NamedTypeNode denoting the value\n * that should be modified or replaced\n * @param {ASTNode} rightType the ASTNode containing the union type to be\n * merged\n * @param {NamedTypeNode} rightValue the NamedTypeNode requesting to be\n * merged and finding a conflicting value already present\n * @return {NamedTypeNode} the union type to merge into the existing schema\n * layout. To ignore changes, returning the leftUnion is sufficient enough.\n * The default behavior is to always take the right hand value, overwriting\n * new with old\n */\nexport type UnionMergeResolver = (\n  leftType: ASTNode,\n  leftUnion: NamedTypeNode,\n  rightType: ASTNode,\n  rightUnion: NamedTypeNode\n) => NamedTypeNode\n\n/**\n * A callback for to resolve merge conflicts with custom scalar types defined\n * by the user.\n *\n * @param {ScalarTypeDefinitionNode} leftScalar the definition node found when\n * parsing ASTNodes. This is the existing value that conflicts with the to be\n * merged value\n * @param {GraphQLScalarTypeConfig} leftConfig *if* there is a resolver defined\n * for the existing ScalarTypeDefinitionNode it will be provided here. If this\n * value is null, there is no availabe config with serialize(), parseValue() or\n * parseLiteral() to work with.\n * @param {ScalarTypeDefinitionNode} rightScalar the definition node found when\n * parsing ASTNodes. This is to be merged value that conflicts with the\n * existing value\n * @param {GraphQLScalarTypeConfig} rightConfig *if* there is a resolver\n * defined for the existing ScalarTypeDefinitionNode it will be provided here.\n * If this value is null, there is no availabe config with serialize(),\n * parseValue() or parseLiteral() to work with.\n * @return {GraphQLScalarTypeConfig} whichever type config or resolver was\n * desired should be returned here.\n *\n * @see https://www.apollographql.com/docs/graphql-tools/scalars.html\n * @see http://graphql.org/graphql-js/type/#graphqlscalartype\n */\nexport type ScalarMergeResolver = (\n  leftScalar: ScalarTypeDefinitionNode,\n  leftConfig: GraphQLScalarTypeConfig,\n  rightScalar: ScalarTypeDefinitionNode,\n  rightConfig: GraphQLScalarTypeConfig\n) => GraphQLScalarTypeConfig\n\n/**\n * An object that specifies the various types of resolvers that might occur\n * during a given conflict resolution\n */\nexport type ConflictResolvers = {\n  /** A handler for resolving fields in matching types */\n  fieldMergeResolver?: FieldMergeResolver,\n\n  /** A handler for resolving directives in matching types */\n  directiveMergeResolver?: DirectiveMergeResolver,\n\n  /** A handler for resolving conflicting enum values */\n  enumValueMergeResolver?: EnumMergeResolver,\n\n  /** A handler for resolving type values in unions */\n  typeValueMergeResolver?: UnionMergeResolver,\n\n  /** A handler for resolving scalar config conflicts in custom scalars */\n  scalarMergeResolver?: ScalarMergeResolver\n}\n\n/** @type {Symbol} a unique symbol used as a key to all instance sdl strings */\nexport const TYPEDEFS_KEY = Symbol()\n\n/** @type {Symbol} a constant symbol used as a key to a flag for express-gql */\nexport const GRAPHIQL_FLAG = Symbol.for('superfluous graphiql flag')\n\n/** @type {Symbol} a unique symbol used as a key to all instance `WeakMap`s */\nexport const MAP = Symbol()\n\n/** @type {Symbol} a key used to store the __executable__ flag on a schema */\nexport const EXE = Symbol()\n\n/** @type {Object} a key used to store a resolver object in a WeakMap */\nconst wmkResolvers = Object(Symbol())\n\n/** @type {Object} a key used to store an internal schema in a WeakMap */\nconst wmkSchema = Object(Symbol())\n\n/**\n * The default field resolver blindly takes returns the right field. This\n * resolver is used when one is not specified.\n *\n * @param {ASTNode} leftType The matching left type indicating conflict\n * @param {FieldNode} leftField The field causing the conflict\n * @param {ASTNode} rightType The matching right type indicating conflict\n * @param {FieldNode} rightField the field cause the conflict\n *\n * @return {FieldNode} the field that should be used after resolution\n */\nexport function DefaultFieldMergeResolver(\n  leftType: ASTNode,\n  leftField: FieldNode,\n  rightType: ASTNode,\n  rightField: FieldNode\n): FieldNode {\n  return rightField\n}\n\n/**\n * The default directive resolver blindly takes returns the right field. This\n * resolver is used when one is not specified.\n *\n * @param {ASTNode} leftType The matching left type indicating conflict\n * @param {DirectiveNode} leftDirective The field causing the conflict\n * @param {ASTNode} rightType The matching right type indicating conflict\n * @param {DirectiveNode} rightDirective the field cause the conflict\n *\n * @return {DirectiveNode} the directive that should be used after resolution\n */\nexport function DefaultDirectiveMergeResolver(\n  leftType: ASTNode,\n  leftDirective: DirectiveNode,\n  rightType: ASTNode,\n  rightDirective: DirectiveNode\n): DirectiveNode {\n  return rightDirective\n}\n\n/**\n * The default field resolver blindly takes returns the right field. This\n * resolver is used when one is not specified.\n *\n * @param {ASTNode} leftType The matching left type indicating conflict\n * @param {DirectiveNode} leftDirective The field causing the conflict\n * @param {ASTNode} rightType The matching right type indicating conflict\n * @param {DirectiveNode} rightDirective the field cause the conflict\n *\n * @return {DirectiveNode} the directive that should be used after resolution\n */\nexport function DefaultEnumMergeResolver(\n  leftType: ASTNode,\n  leftValue: EnumValueNode,\n  rightType: ASTNode,\n  rightValue: EnumValueNode\n): EnumValueNode {\n  return rightValue\n}\n\n/**\n * The default union resolver blindly takes returns the right type. This\n * resolver is used when one is not specified.\n *\n * @param {ASTNode} leftType The matching left type indicating conflict\n * @param {NamedTypeNode} leftUnion The named node causing the conflict\n * @param {ASTNode} rightType The matching right type indicating conflict\n * @param {NamedTypeNode} rightUnion the named node cause the conflict\n *\n * @return {NamedTypeNode} the directive that should be used after resolution\n */\nexport function DefaultUnionMergeResolver(\n  leftType: ASTNode,\n  leftUnion: NamedTypeNode,\n  rightType: ASTNode,\n  rightUnion: NamedTypeNode\n): NamedTypeNode {\n  return rightUnion\n}\n\n/**\n * The default scalar merge resolver returns the right config when there is\n * one, otherwise the left one or null will be the default result. This is\n * slightly different behavior since resolvers for scalars are not always\n * available.\n *\n * @param {GraphQLScalarTypeConfig} leftConfig *if* there is a resolver defined\n * for the existing ScalarTypeDefinitionNode it will be provided here. If this\n * value is null, there is no availabe config with serialize(), parseValue() or\n * parseLiteral() to work with.\n * @param {ScalarTypeDefinitionNode} rightScalar the definition node found when\n * parsing ASTNodes. This is to be merged value that conflicts with the\n * existing value\n * @param {GraphQLScalarTypeConfig} rightConfig *if* there is a resolver\n * defined for the existing ScalarTypeDefinitionNode it will be provided here.\n * If this value is null, there is no availabe config with serialize(),\n * parseValue() or parseLiteral() to work with.\n * @return {GraphQLScalarTypeConfig} whichever type config or resolver was\n * desired should be returned here.\n *\n * @see https://www.apollographql.com/docs/graphql-tools/scalars.html\n * @see http://graphql.org/graphql-js/type/#graphqlscalartype\n */\nexport function DefaultScalarMergeResolver(\n  leftScalar: ScalarTypeDefinitionNode,\n  leftConfig: GraphQLScalarTypeConfig,\n  rightScalar: ScalarTypeDefinitionNode,\n  rightConfig: GraphQLScalarTypeConfig\n): GraphQLScalarTypeConfig {\n  return rightConfig ? rightConfig : (leftConfig || null)\n}\n\n/**\n * In order to facilitate merging, there needs to be some contingency plan\n * for what to do when conflicts arise. This object specifies one of each\n * type of resolver. Each simply takes the right-hand value.\n *\n * @type {Object}\n */\nexport const DefaultConflictResolvers: ConflictResolvers = {\n  /** A handler for resolving fields in matching types */\n  fieldMergeResolver: DefaultFieldMergeResolver,\n\n  /** A handler for resolving directives in matching types */\n  directiveMergeResolver: DefaultDirectiveMergeResolver,\n\n  /** A handler for resolving conflicting enum values */\n  enumValueMergeResolver: DefaultEnumMergeResolver,\n\n  /** A handler for resolving type values in unions */\n  typeValueMergeResolver: DefaultUnionMergeResolver,\n\n  /** A handler for resolving scalar configs in custom scalars */\n  scalarMergeResolver: DefaultScalarMergeResolver\n};\n\nconst subTypeResolverMap: Map<string, Function> = new Map()\nsubTypeResolverMap.set('fields', 'fieldMergeResolver')\nsubTypeResolverMap.set('directives', 'directiveMergeResolver')\nsubTypeResolverMap.set('values', 'enumValueMergeResolver')\nsubTypeResolverMap.set('types', 'typeValueMergeResolver')\nsubTypeResolverMap.set('scalars', 'scalarMergeResolver')\n\n/**\n * Compares and combines a subset of ASTNode fields. Designed to work on all\n * the various types that might have a merge conflict.\n *\n * @param {string} subTypeName the name of the field type; one of the following\n * values: 'fields', 'directives', 'values', 'types'\n * @param {ASTNode} lType the lefthand type containing the subtype to compare\n * @param {ASTNode} lSubType the lefthand subtype; fields, directive, value or\n * named union type\n * @param {ASTNode} rType the righthand type containing the subtype to compare\n * @param {ASTNode} rSubType the righthand subtype; fields, directive, value or\n * named union type\n */\nfunction combineTypeAndSubType(\n  subTypeName: string,\n  lType: ASTNode,\n  rType: ASTNode,\n  conflictResolvers: ConflictResolvers = DefaultConflictResolvers\n): void {\n  if (rType[subTypeName]) {\n    for (let rSubType of rType[subTypeName]) {\n      let lSubType = lType[subTypeName].find(\n        f => f.name.value == rSubType.name.value\n      )\n\n      if (!lSubType) {\n        lType[subTypeName].push(rSubType)\n        continue\n      }\n\n      let resolver = subTypeResolverMap.get(subTypeName) || 'fieldMergeResolver'\n      let resultingSubType = conflictResolvers[resolver](\n        lType, lSubType, rType, rSubType\n      )\n      let index = lType.fields.indexOf(lSubType)\n\n      lType[subTypeName].splice(index, 1, resultingSubType)\n    }\n  }\n}\n\n/**\n * Compares a subset of ASTNode fields. Designed to work on all the various\n * types that might have a merge conflict.\n *\n * @param {string} subTypeName the name of the field type; one of the following\n * values: 'fields', 'directives', 'values', 'types'\n * @param {ASTNode} lType the lefthand type containing the subtype to compare\n * @param {ASTNode} lSubType the lefthand subtype; fields, directive, value or\n * named union type\n * @param {ASTNode} rType the righthand type containing the subtype to compare\n * @param {ASTNode} rSubType the righthand subtype; fields, directive, value or\n * named union type\n */\nfunction pareTypeAndSubType(\n  subTypeName: string,\n  lType: ASTNode,\n  rType: ASTNode,\n  resolvers: Object = {}\n): void {\n  for (let rSubType of rType[subTypeName]) {\n    let lSubType = lType[subTypeName].find(\n      f => f.name.value == rSubType.name.value\n    )\n\n    if (!lSubType) {\n      continue\n    }\n\n    let index = lType.fields.indexOf(lSubType)\n    lType[subTypeName].splice(index, 1)\n\n    if (\n      resolvers[lType.name.value]\n      && resolvers[lType.name.value][lSubType.name.value]\n    ) {\n      delete resolvers[lType.name.value][lSubType.name.value]\n    }\n    else if (resolvers[lSubType.name.value]) {\n      delete resolvers[lSubType.name.value]\n    }\n  }\n}\n\n/**\n * Small function that sorts through the typeDefs value supplied which can be\n * any one of a Schemata instance, GraphQLSchema instance, Source instance or a\n * string.\n *\n * @param {string|Source|Schemata|GraphQLSchema} typeDefs the input source from\n * which to create a Schemata string\n * @return {string} a string representing the thing supplied as typeDefs\n */\nexport function normalizeSource(\n  typeDefs: string | Source | Schemata | GraphQLSchema,\n  wrap: boolean = false\n): (string | Schemata) {\n  if (!typeDefs) {\n    throw new Error(inline`\n      normalizeSource(typeDefs): typeDefs was invalid when passed to the\n      function \\`normalizeSource\\`. Please check your code and try again.\n\n      (received: ${typeDefs})\n    `)\n  }\n\n  let source = typeDefs.body\n    || typeDefs.sdl\n    || (typeof typeDefs === 'string' && typeDefs)\n    || (typeDefs instanceof GraphQLSchema\n      ? printSchema(typeDefs)\n      : typeDefs.toString())\n\n  return wrap ? Schemata.from(source) : source;\n}\n\n/**\n * A small `String` extension that makes working with SDL/IDL text far easier\n * in both your own libraries as well as in a nodeJS REPL. Built-in to what\n * appears to be a normal String for all intents and purposes, are the ability\n * to transform the string into a set of AST nodes, a built schema or back to\n * the SDL string.\n *\n * @class  Schemata\n */\nexport class Schemata extends String {\n  /**\n   * Creates a new `String`, presumably of SDL or IDL. The getter `.valid`\n   * will provide some indication as to whether or not the code is valid.\n   *\n   * @constructor\n   * @memberOf Schemata\n   *\n   * @param {string|Schemata|Source|GraphQLSchema} typeDefs an instance\n   * of Schemata, a string of SDL, a Source instance of SDL or a GraphQLSchema\n   * that can be printed as an SDL string\n   * @param {Object} resolvers an object containing field resolvers for\n   * for the schema represented with this string. [Optional]\n   */\n  constructor(\n    typeDefs: string | Source | Schemata | GraphQLSchema,\n    resolvers: ?Object = null\n  ) {\n    super(normalizeSource(typeDefs))\n\n    resolvers = (\n      resolvers\n      || typeDefs instanceof Schemata && typeDefs.resolvers\n      || typeDefs instanceof GraphQLSchema && stripResolversFromSchema(typeDefs)\n      || null\n    )\n\n    this[GRAPHIQL_FLAG] = true\n    this[TYPEDEFS_KEY] = normalizeSource(typeDefs)\n    this[MAP] = new WeakMap()\n    this[MAP].set(\n      wmkSchema,\n      typeDefs instanceof GraphQLSchema ? typeDefs : null\n    )\n    this[MAP].set(wmkResolvers, resolvers)\n\n    // Mark a schema passed to use in the constructor as an executable schema\n    // to prevent any replacement of the value by getters that generate a\n    // schema from the SDL\n    if (this[MAP].get(wmkSchema)) {\n      this[MAP].get(wmkSchema)[EXE] = true\n      this[MAP].get(wmkSchema)[Symbol.for('constructor-supplied-schema')] = true\n    }\n  }\n\n  /**\n   * Symbol.species ensures that any String methods used on this instance will\n   * result in a Schemata instance rather than a String. NOTE: this does not\n   * work as expected in current versions of node. This bit of code here is\n   * basically a bit of future proofing for when Symbol.species starts working\n   * with String extended classes\n   *\n   * @type {Function}\n   */\n  static get [Symbol.species](): Function { return Schemata }\n\n  /**\n   * Ensures that instances of Schemata report internally as Schemata object.\n   * Specifically using things like `Object.prototype.toString`.\n   *\n   * @type {string}\n   */\n  get [Symbol.toStringTag](): string { return this.constructor.name }\n\n  /**\n   * Returns the AST nodes for this snippet of SDL. It will throw an error\n   * if the string is not valid SDL/IDL.\n   *\n   * @return {ASTNode} any valid ASTNode supported by GraphQL\n   */\n  get ast(): ASTNode { return this.constructor.parse(this.sdl, false) }\n\n  /**\n   * Retrieves the `graphiql` flag, which defaults to true. This flag can\n   * make setting up an endpoint from a Schemata instance easier with express-graphql\n   *\n   * @type {boolean}\n   */\n  get graphiql(): boolean { return this[GRAPHIQL_FLAG] }\n\n  /**\n   * Setter to alter the default 'true' flag to make an Schemata instance a\n   * valid single argument to functions like `graphqlHTTP()` from express\n   * GraphQL.\n   *\n   * NOTE: this flag means nothing to the Schemata class but might be useful in\n   * your project.\n   *\n   * @type {boolean} true if graphiql should be started; false otherwise\n   */\n  set graphiql(value: boolean): void { this[GRAPHIQL_FLAG] = value }\n\n  /**\n   * Returns a GraphQLSchema object. Note this will fail and throw an error\n   * if there is not at least one Query, Subscription or Mutation type defined.\n   * If there is no stored schema, and there are resolvers, an executable\n   * schema is returned instead.\n   *\n   * @return {GraphQLSchema} an instance of GraphQLSchema if valid SDL\n   */\n  get schema(): GraphQLSchema {\n    if (this[MAP].get(wmkSchema)) {\n      return this[MAP].get(wmkSchema)\n    }\n\n    try {\n      if (this.resolvers && Object.keys(this.resolvers).length) {\n        return this.executableSchema\n      }\n      else {\n        this[MAP].set(wmkSchema, this.constructor.buildSchema(this.sdl, true))\n        this[MAP].get(wmkSchema)[EXE] = false\n      }\n    }\n    catch (error) {\n      return null\n    }\n\n    return this[MAP].get(wmkSchema)\n  }\n\n  /**\n   * Sets a GraphQLSchema object on the internal weak map store.\n   *\n   * @param {GraphQLSchema} schema an instance of GraphQLSchema instance to\n   * store on the internal weak map. Any schema stored here will be modified\n   * by methods that do so.\n   */\n  set schema(schema: ?GraphQLSchema): void {\n    this[MAP].set(wmkSchema, schema)\n  }\n\n  /**\n   * Returns a GraphQLSchema object, pre-bound, to the associated resolvers\n   * methods in `.resolvers`. If `.resolvers` is falsey, an error will be\n   * thrown.\n   *\n   * @return {GraphQLSchema} an instance of GraphQLSchema with pre-bound\n   * resolvers\n   */\n  get executableSchema(): GraphQLSchema {\n    const isRootType = (t) => {\n      if (t === undefined || t === null || !t) {\n        return false;\n      }\n\n      let name = (typeof t.name === 'string') ? t.name : t.name.value\n\n      return ((t instanceof GraphQLObjectType) &&\n        (t.name === 'Query'\n        || t.name === 'Mutation'\n        || t.name === 'Subscription')\n      )\n    }\n    const Class = this.constructor\n    const resolvers = this.resolvers\n    let schema\n\n    if (this[MAP].get(wmkSchema) && this.resolvers) {\n      schema = this[MAP].get(wmkSchema)\n\n      if (schema && schema[EXE]) {\n        return schema\n      }\n    }\n\n    try {\n      this[MAP].set(wmkSchema, (schema = Class.buildSchema(this.sdl, true)))\n    }\n    catch (error) {\n      return null\n    }\n\n    this.forEachField((\n      type, typeName, typeDirectives,\n      field, fieldName, fieldArgs, fieldDirectives,\n      schema, context\n    ) => {\n      if (!resolvers) { return }\n\n      if (isRootType(type) && resolvers[fieldName]) {\n        field.resolve = resolvers[fieldName]\n        field.astNode.resolve = resolvers[fieldName]\n      }\n\n      if (resolvers[typeName] && resolvers[typeName][fieldName]) {\n        field.resolve = resolvers[typeName][fieldName]\n        field.astNode.resolve = resolvers[typeName][fieldName]\n      }\n    })\n\n    schema[EXE] = true\n    this[MAP].set(wmkSchema, schema)\n\n    return schema;\n  }\n\n  /**\n   * Returns the string this instance was generated with.\n   *\n   * @return {string} the string this class instance represents\n   */\n  get sdl(): string { return this[TYPEDEFS_KEY] }\n\n  /**\n   * A synonym or alias for `.sdl`. Placed here for the express purpose of\n   * destructuing when used with Apollo's makeExecutableSchema or other\n   * libraries expecting values of the same name\n   *\n   * i.e.\n   *   // sdl.typeDefs and sdl.resolvers will be where the function expects\n   *   let schema = require('graphql-tools').makeExecutableSchema(sdl)\n   *\n   * @return {string} a string of SDL/IDL for use with graphql\n   */\n  get typeDefs(): string { return this.sdl }\n\n  /**\n   * An internal call to buildResolvers(true), thereby requesting a flattened\n   * resolver map with Query, Mutation and Subscription fields exposed as root\n   * objects the way the Facebook reference implementation expects\n   *\n   * @return {Object} an object of functions or an empty object otherwise\n   */\n  get rootValue(): Object { return this.buildResolvers(true) }\n\n  /**\n   * Returns any resolvers function object associated with this instance.\n   *\n   * @return {Object} an object containing field resolvers or null if none\n   * are stored within\n   */\n  get resolvers(): Object { return this[MAP].get(wmkResolvers) }\n\n  /**\n   * A method to fetch a particular field resolver from the schema represented\n   * by this Schemata instance.\n   *\n   * @param {string} type the name of the type desired\n   * @param {string} field the name of the field containing the resolver\n   * @return {Function} the function resolver for the type and field in\n   * question\n   */\n  schemaResolverFor(type: string, field: string): ?Function {\n    if (\n      !this.resolvers\n      || !Object.keys(this.resolvers).length\n      || !this.valid\n    ) {\n      return null\n    }\n\n    let _type = this.executableSchema.getType(type)\n    let _field = _type.getFields() && _type.getFields()[field] || null\n    let resolve = _field && _field.resolve || null\n\n    return resolve\n  }\n\n  /**\n   * Builds a schema based on the SDL in the instance and then parses it to\n   * fetch a named field in a named type. If either the type or field are\n   * missing or if the SDL cannot be built as a schema, null is returned.\n   *\n   * @param {string} type the name of a type\n   * @param {string} field the name of a field contained in the above type\n   * @return {FieldNode} the field reference in the type and field supplied\n   */\n  schemaFieldByName(type: string, field: string): FieldNode {\n    if (!this.validSchema) { return null }\n\n    let _type = this.schema.getType(type)\n    let _field = _type.getFields() && _type.getFields()[field] || null\n\n    return _field\n  }\n\n  /**\n   * For SDL that doesn't properly build into a GraphQLSchema, it can still be\n   * parsed and searched for a type by name.\n   *\n   * @param {string} type the name of a type\n   * @return {FieldNode} the field reference in the type and field supplied\n   */\n  astTypeByName(type: string): ASTNode {\n    if (!this.validSDL) { return null }\n\n    let _type = this.ast.definitions.find(f => f.name.value === type)\n\n    return _type\n  }\n\n  /**\n   * For SDL that doesn't properly build into a GraphQLSchema, it can still be\n   * searched for a type and field.\n   *\n   * @param {string} type the name of a type\n   * @param {string} field the name of a field contained in the above type\n   * @return {FieldNode} the field reference in the type and field supplied\n   */\n  astFieldByName(type: string, field: string): FieldNode {\n    if (!this.validSDL) { return null }\n\n    let _type = this.ast.definitions.find(f => f.name.value === type)\n    let _field = _type && _type.fields.find(f => f.name.value === field) || null\n\n    return _field\n  }\n\n  /**\n   * Walks the AST for this SDL string and checks for the names of the fields\n   * of each of the root types; Query, Mutation and Subscription. If there are\n   * no root types defined, false is returned.\n   *\n   * If there is at least one root type *and* some resolvers *and* at least one\n   * of the fields of at least one root type is present in the root of the\n   * resolvers map, true is returned. Otherwise, false.\n   *\n   * @return {boolean} true if the defined resolvers have at least one root\n   * type field as a resolver on the root of the resolver map; false otherwise.\n   */\n  get hasFlattenedResolvers(): boolean {\n    let asts = this.validSDL && this.ast.definitions || null\n\n    if (!asts || !this.resolvers) { return false }\n\n    let query = asts.find(f => f.name.value == 'Query')\n    let mutation = asts.find(f => f.name.value == 'Mutation')\n    let subscription = asts.find(f => f.name.value == 'Subscription')\n    let resolvers = this.resolvers\n\n    if (!query && !mutation && !subscription) {\n      return false\n    }\n\n    for (let type of [query, mutation, subscription]) {\n      if (!type || !type.fields) { continue }\n\n      for (let field of type.fields) {\n        if (field.name.value in resolvers) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Merging Schematas are a common feature in the modern world of GraphQL.\n   * Especially when there are multiple teams working in tandem. This feature\n   * supports merging of types, extended types, interfaces, enums, unions,\n   * input object types and directives for all of the above.\n   *\n   * @param {string|Schemata|Source|GraphQLSchema} schemaLanguage an instance\n   * of Schemata, a string of SDL, a Source instance of SDL or a GraphQLSchema\n   * that can be printed as an SDL string to define what to merge with the\n   * values in this object instance\n   * @param {ConflictResolvers} conflictResolvers an object containing up to\n   * four methods, each describing how to handle a conflict when an associated\n   * type of conflict occurs. If no object or method are supplied, the right\n   * hande value always takes precedence over the existing value; replacing it\n   * @return {Schemata} a new instance of Schemata\n   */\n  mergeSDL(\n    schemaLanguage: string | Schemata | Source | GraphQLSchema,\n    conflictResolvers: ?ConflictResolvers = DefaultConflictResolvers\n  ): Schemata {\n    let source = normalizeSource(schemaLanguage, true)\n\n    if (!source) {\n      throw new Error(inline`\n        The call to mergeSDL(schemaLanguage, conflictResolvers) received an\n        invalid value for schemaLanguage. Please check your code and try again.\n        Received ${schemaLanguage}.\n      `)\n    }\n\n    let lAST = this.ast\n    let rAST = source.ast\n    let _scalarFns = {}\n\n    // Ensure we have default behavior with any custom behavior assigned\n    // atop the default ones should only a partial custom be supplied.\n    conflictResolvers = Object.assign(\n      DefaultConflictResolvers,\n      conflictResolvers\n    )\n\n    for (let rType of rAST.definitions) {\n      let lType = lAST.definitions.find(a => a.name.value == rType.name.value)\n\n      if (\n        rType.kind\n        && rType.kind.endsWith\n        && rType.kind.endsWith('Extension')\n      ) {\n        rType = Object.assign({}, rType)\n        rType.kind =\n          rType.kind.substring(0, rType.kind.length - 9) + 'Definition'\n      }\n\n      if (!lType) {\n        lAST.definitions.push(rType)\n        continue\n      }\n\n      switch (lType.kind) {\n        default:\n        case 'ObjectTypeDefinition':\n        case 'ObjectTypeDefinitionExtension':\n        case 'InterfaceTypeDefinition':\n        case 'InterfaceTypeDefinitionExtension':\n        case 'InputObjectTypeDefinition':\n        case 'InputObjectTypeDefinitionExtension':\n          combineTypeAndSubType('directives', lType, rType, conflictResolvers)\n          combineTypeAndSubType('fields', lType, rType, conflictResolvers)\n          break;\n\n        case 'EnumTypeDefinition':\n          combineTypeAndSubType('directives', lType, rType, conflictResolvers)\n          combineTypeAndSubType('values', lType, rType, conflictResolvers)\n          break;\n\n        case 'UnionTypeDefinition':\n          combineTypeAndSubType('directives', lType, rType, conflictResolvers)\n          combineTypeAndSubType('types', lType, rType, conflictResolvers)\n          break;\n\n        case 'ScalarTypeDefinitionNode':\n          let lScalar, lScalarConfig, rScalar, rScalarConfig, resolver\n\n          combineTypeAndSubType('directives', lType, rType, conflictResolvers)\n\n          if (this.schema) {\n            lScalar = this.schema.getType(lType.name.value)\n            lScalarConfig = lScalar && lScalar._scalarConfig || null\n          }\n\n          if (source.schema) {\n            rScalar = source.schema.getType(rType.name.value)\n            rScalarConfig = rScalar && rScalar._scalarConfig || null\n          }\n\n          resolver = (\n            conflictResolvers.scalarMergeResolver\n            || DefaultConflictResolvers.scalarMergeResolver\n          )(lType, lScalarConfig, rType, rScalarConfig)\n\n          if (resolver) {\n            _scalarFns[lType.name.value] = _scalarFns[lType.name.value] || {}\n            _scalarFns[lType.name.value] = resolver\n          }\n\n          break;\n      }\n    }\n\n    let merged = Schemata.from(this.constructor.gql.print(lAST))\n\n    if (Object.keys(_scalarFns).length) {\n      for (let typeName of Object.keys(_scalarFns)) {\n        merged.schema.getType(typeName)._scalarConfig = _scalarConfig[typeName]\n      }\n    }\n\n    return merged\n  }\n\n  /**\n   * Paring down Schematas can be handy for certain types of schema stitching.\n   * The SDL passed in and any associated resolvers will be removed from\n   * a copy of the SDL in this Schemata instance represents and the resolver\n   * map passed in.\n   *\n   * @param {string|Schemata|Source|GraphQLSchema} schemaLanguage an instance\n   * of Schemata, a string of SDL, a Source instance of SDL or a GraphQLSchema\n   * that can be printed as an SDL string to define what to pare with the\n   * values in this object instance\n   * @param {Object} resolverMap an object containing resolver functions, from\n   * either those set on this instance or those in the resolverMap added in\n   * @return {Schemata} a new Schemata instance with the changed values set\n   * on it\n   */\n  pareSDL(\n    schemaLanguage: string | Schemata | Source | GraphQLSchema,\n    resolverMap: ?Object = null\n  ): Schemata {\n    let source = normalizeSource(schemaLanguage, true)\n    if (!source) {\n      throw new Error(inline`\n        In the call to pareSDL(schemaLanguage), the supplied value for\n        \\`schemaLanguage\\` could not be parsed.\n      `)\n    }\n\n    if (schemaLanguage instanceof GraphQLSchema && !resolverMap) {\n      resolverMap = stripResolversFromSchema(schemaLanguage)\n    }\n\n    let resolvers = Object.assign({}, resolverMap || this.resolvers || {})\n    let lAST = this.ast\n    let rAST = source.ast\n\n    for (let rType of rAST.definitions) {\n      let lType = lAST.definitions.find(a => a.name.value == rType.name.value)\n\n      if (\n        rType.kind\n        && rType.kind.endsWith\n        && rType.kind.endsWith('Extension')\n      ) {\n        let len = 'Extension'.length\n\n        rType = Object.assign({}, rType)\n        rType.kind =\n          rType.kind.substring(0, rType.kind.length - len) + 'Definition'\n      }\n\n      if (!lType) {\n        lAST.definitions.push(rType)\n        continue\n      }\n\n      switch (lType.kind) {\n        default:\n        case 'ObjectTypeDefinition':\n        case 'ObjectTypeDefinitionExtension':\n        case 'InterfaceTypeDefinition':\n        case 'InterfaceTypeDefinitionExtension':\n        case 'InputObjectTypeDefinition':\n        case 'InputObjectTypeDefinitionExtension':\n          pareTypeAndSubType('directives', lType, rType, resolvers)\n          pareTypeAndSubType('fields', lType, rType, resolvers)\n\n          if (!lType.fields.length) {\n            let index = lAST.definitions.indexOf(lType)\n\n            if (index !== -1) {\n              lAST.definitions.splice(index, 1)\n            }\n          }\n          break;\n\n        case 'EnumTypeDefinition':\n          pareTypeAndSubType('directives', lType, rType, resolvers)\n          pareTypeAndSubType('values', lType, rType, resolvers)\n\n          if (!lType.values.length) {\n            let index = lAST.definitions.indexOf(lType)\n\n            if (index !== -1) {\n              lAST.definitions.splice(index, 1)\n            }\n          }\n          break;\n\n        case 'UnionTypeDefinition':\n          pareTypeAndSubType('directives', lType, rType, resolvers)\n          pareTypeAndSubType('types', lType, rType, resolvers)\n\n          if (!lType.types.length) {\n            let index = lAST.definitions.indexOf(lType)\n\n            if (index !== -1) {\n              lAST.definitions.splice(index, 1)\n            }\n          }\n          break;\n\n        case 'ScalarTypeDefinitionNode':\n          let index = lAST.definitions.indexOf(lType)\n\n          if (index !== -1) {\n            lAST.definitions.splice(index, 1)\n          }\n          break;\n      }\n    }\n\n    let result = Schemata.from(this.constructor.gql.print(lAST), resolvers)\n    result.executableSchema\n\n    return result\n  }\n\n  /**\n   * A new Schemata object instance with merged schema definitions as its\n   * contents as well as merged resolvers and newly bound executable schema are\n   * all created in this step and passed back. The object instance itself is\n   * not modified\n   *\n   * Post merge, the previously stored and merged resolvers map are are applied\n   * and a new executable schema is built from the ashes of the old.\n   *\n   * @param {GraphQLSchema} schema an instance of GraphQLSchema to merge\n   * @param {ConflictResolvers} conflictResolvers an object containing up to\n   * four methods, each describing how to handle a conflict when an associated\n   * type of conflict occurs. If no object or method are supplied, the right\n   * hande value always takes precedence over the existing value; replacing it\n   * @return {Schemata} a new instance of Schemata with a merged schema string,\n   * merged resolver map and newly bound executable schema attached are all\n   * initiated\n   */\n  mergeSchema(\n    schema: GraphQLSchema,\n    conflictResolvers: ?ConflictResolvers = DefaultConflictResolvers\n  ): Schemata {\n    if (!schema) {\n      throw new Error(inline`\n        In the call to mergeSchema(schema), ${schema} was received as a value\n        and the code could not proceed because of it. Please check your code\n        and try again\n      `)\n    }\n\n    let resolvers = this.buildResolvers()\n    let mergeResolvers = stripResolversFromSchema(schema)\n\n    resolvers = merge(this.buildResolvers(), mergeResolvers)\n\n    let schemata = this.mergeSDL(schema)\n\n    // Set the resolvers\n    schemata.resolvers = resolvers\n\n    // Trigger a new schema creation\n    schemata.executableSchema\n\n    return schemata\n  }\n\n  /**\n   * Given a schema, based on the Schemata this object is based on, walk it and\n   * build up a resolver map. This function will always return a non-null\n   * object. It will be empty if there are either no resolvers to be found\n   * in the schema or if a valid schema cannot be created.\n   *\n   * @param {boolean|Object} flattenRootResolversOrFirstParam if this value is\n   * boolean, and if this value is true, the resolvers from Query, Mutation\n   * and Subscription types will be flattened to the root of the object. If\n   * the first parametr is an Object, it will be merged in normally with\n   * Object.assign.\n   * @param {Array<Object>} ...extendWith an unlimited array of objects that\n   * can be used to extend the built resolver map.\n   * @return {Object} a resolver map; i.e. an object of resolver functions\n   */\n  buildResolvers(\n    flattenRootResolversOrFirstParam: boolean|Object,\n    ...extendWith: Array<Object>\n  ): Object {\n    let schemata = Schemata.from(this.sdl, this.resolvers)\n    let resolvers = Object.assign({},\n      (stripResolversFromSchema(schemata.executableSchema)\n        || schemata.resolvers\n        || {}\n      )\n    )\n\n    // Next check to see if we are flattening or simply extending\n    if (typeof flattenRootResolversOrFirstParam === 'boolean') {\n      for (let rootType of ['Query', 'Mutation', 'Subscription']) {\n        if (flattenRootResolversOrFirstParam) {\n          if (resolvers[rootType]) {\n            for (let field of Object.keys(resolvers[rootType])) {\n              resolvers[field] = resolvers[rootType][field]\n              delete resolvers[rootType][field]\n            }\n\n            delete resolvers[rootType]\n          }\n        }\n        else {\n          for (let field of Object.keys(resolvers)) {\n            if (schemata.schemaFieldByName(rootType, field)) {\n              resolvers[rootType] = resolvers[rootType] || {}\n              resolvers[rootType][field] = resolvers[field]\n              delete resolvers[field]\n            }\n          }\n        }\n      }\n    }\n    else {\n      Object.assign(resolvers, flattenRootResolversOrFirstParam)\n    }\n\n    // Finally extend with any remaining arguments\n    if (extendWith.length) {\n      Object.assign(resolvers, ...extendWith)\n    }\n\n    return resolvers\n  }\n\n  /**\n   * A method to determine if an executable schema is attached to this Schemata\n   * instance. It does so by walking the schema fields via `buildResolvers()`\n   * and reporting whether there is anything inside the results or not.\n   *\n   * @return {boolean} true if there is at least one resolver on at least one\n   * field of a type in this Schemata instance's schema.\n   */\n  get hasAnExecutableSchema(): boolean {\n    return Object.keys(this.buildResolvers()).length > 0;\n  }\n\n  /**\n   * If the `.sdl` property is valid SDL/IDL and can generate valid AST nodes\n   * this function will return true. It will return false otherwise.\n   *\n   * @return {boolean} true if the string can be parsed; false otherwise\n   */\n  get validSDL(): boolean {\n    try {\n      this.constructor.gql.parse(this.sdl)\n      return true\n    }\n    catch(e) {\n      return false\n    }\n  }\n\n  /**\n   * If the `.schema` property is valid SDL/IDL and can generate a valid\n   * GraphQLSchema, this function will return true. It will return false\n   * otherwise.\n   *\n   * @return {boolean} true if the string can be parsed into a schema; false\n   * otherwise\n   */\n  get validSchema(): boolean {\n    try {\n      this.schema;\n      return true\n    }\n    catch (e) {\n      return false\n    }\n  }\n\n  /**\n   * Returns true if the string underlying this instance represents valid SDL\n   * that can be both converted to AST nodes or a valid GraphQLSchema instance\n   *\n   * @return {boolean} true if it is valid for both `parse()` as well as the\n   * `buildSchema()` function\n   */\n  get valid(): boolean { return this.validSDL && this.validSchema }\n\n\n  /**\n   * If the internal resolvers object needs to be changed after creation, this\n   * method allows a way to do so. Setting the value to `null` is equivalent\n   * to removing any stored value. Finally the contents are stored in a weak\n   * map so its contents are not guaranteed over a long period of time.\n   *\n   * @param {Object} resolvers an object containing field resolvers for this\n   * string instance.\n   */\n  set resolvers(resolvers: ?Object): void {\n    this[MAP].set(wmkResolvers, resolvers)\n  }\n\n  /**\n   * Removes the resolver map associated with this Schemata instance\n   */\n  clearResolvers(): void {\n    this.resolvers = null\n  }\n\n  /**\n   * Removes the schema stored with this Schemata instance\n   */\n  clearSchema(): void {\n    this.schema = null\n  }\n\n  /**\n   * Returns the underlying string passed or generated in the constructor when\n   * inspected in the nodeJS REPL.\n   *\n   * @return {string} the SDL/IDL string this class was created on\n   */\n  inspect(): string { return this.sdl }\n\n  /**\n   * The same as `inspect()`, `toString()`, and `valueOf()`. This method\n   * returns the underlying string this class instance was created on.\n   *\n   * @return {string} [description]\n   */\n  toString(): string { return this.sdl }\n\n  /**\n   * The same as `inspect()`, `toString()`, and `valueOf()`. This method\n   * returns the underlying string this class instance was created on.\n   *\n   * @return {string} [description]\n   */\n  valueOf(): string { return this.sdl }\n\n  /**\n   * Iterates over the values contained in a Schema's typeMap. If a desired\n   * value is encountered, the supplied callback will be invoked. The values are\n   * the constants ALL, TYPES, INTERFACES, ENUMS, UNIONS and SCALARS. Optionally\n   * HIDDEN is another value that can be bitmasked together for a varied result.\n   * HIDDEN exposes the values in the schema typemap that begin with a double\n   * underscore.\n   *\n   * The signature for the function callback is as follows:\n   * (\n   *   type: mixed,\n   *   typeName: string,\n   *   typeDirectives: Array<GraphQLDirective>\n   *   schema: GraphQLSchema,\n   *   context: mixed,\n   * ) => void\n   *\n   * Where:\n   *   `type`           - the object instance from within the `GraphQLSchema`\n   *   `typeName`       - the name of the object; \"Query\" for type Query and\n   *                      so on.\n   *   `typeDirectives` - an array of directives applied to the object or an\n   *                      empty array if there are none applied.\n   *   `schema`         - an instance of `GraphQLSchema` over which to iterate\n   *   `context`        - usually an object, and usually the same object,\n   *                      passed to the call to `makeExecutableSchema()`\n   *                      or `graphql()`\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {Number} types a bitmask of one or more of the constants defined\n   * above. These can be OR'ed together and default to TYPES.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n   * over and returned.\n   */\n  forEachOf(\n    fn: ForEachOfResolver,\n    context: mixed,\n    types: number = TYPES,\n    suppliedSchema: ?GraphQLSchema = null\n  ): GraphQLSchema {\n    let schema = suppliedSchema || this.schema\n\n    forEachOf(schema, fn, context, types)\n\n    return schema\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to types.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this Schemata\n   * @return {GraphQLSchema} a new schema is generated from this Schemata, iterated\n   * over and returned.\n   */\n  forEachType(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, TYPES, suppliedSchema)\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to input object types.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this Schemata\n   * @return {GraphQLSchema} a new schema is generated from this Schemata, iterated\n   * over and returned.\n   */\n  forEachInputObjectType(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, INPUT_TYPES, suppliedSchema)\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to unions.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n   * over and returned.\n   */\n  forEachUnion(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, UNIONS, suppliedSchema)\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to enums.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n   * over and returned.\n   */\n  forEachEnum(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, ENUMS, suppliedSchema)\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to interfaces.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n   * over and returned.\n   */\n  forEachInterface(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, INTERFACES, suppliedSchema)\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to types.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL,\n   * iterated over and returned.\n   */\n  forEachScalar(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, SCALARS, suppliedSchema)\n  }\n\n  /**\n   * Shortcut to `forEachOf()` specific to all root types; Query, Mutation and\n   * Subscription that exist within the schema.\n   *\n   * @see #forEachOf\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n   * over and returned.\n   */\n  forEachRootType(\n    fn: ForEachOfResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema\n  ): GraphQLSchema {\n    return this.forEachOf(fn, context, ROOT_TYPES, suppliedSchema)\n  }\n\n  /**\n   * An extension of `forEachOf` that targets the fields of the types in the\n   * schema's typeMap. This function provides more detail and allows greater\n   * access to any associated `context` than the function of the same name\n   * provided by the `graphql-tools` library.\n   *\n   * The signature for the callback function is as follows\n   *\n   * (\n   *   type: mixed,\n   *   typeName: string,\n   *   typeDirectives: Array<GraphQLDirective>,\n   *   field: mixed,\n   *   fieldName: string,\n   *   fieldArgs: Array<GraphQLArgument>,\n   *   fieldDirectives: Array<GraphQLDirective>,\n   *   schema: GraphQLSchema,\n   *   context: mixed\n   * ) => void\n   *\n   * Where\n   *\n   * Where:\n   *   `type`           - the object instance from within the `GraphQLSchema`\n   *   `typeName`       - the name of the object; \"Query\" for type Query and\n   *                      so on\n   *   `typeDirectives` - an array of directives applied to the object or an\n   *                      empty array if there are none applied.\n   *   `field`          - the field in question from the type\n   *   `fieldName`      - the name of the field as a string\n   *   `fieldArgs`      - an array of arguments for the field in question\n   *   `fieldDirectives`- an array of directives applied to the field or an\n   *                      empty array should there be no applied directives\n   *   `schema`         - an instance of `GraphQLSchema` over which to iterate\n   *   `context`        - usually an object, and usually the same object, passed\n   *                      to the call to `makeExecutableSchema()` or `graphql()`\n   *\n   * @param {Function} fn a function with a signature defined above\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n   * over and returned.\n   */\n  forEachField(\n    fn: ForEachFieldResolver,\n    context: mixed,\n    types: number = ALL,\n    suppliedSchema: ?GraphQLSchema = null\n  ): GraphQLSchema {\n    let schema = suppliedSchema || this.schema\n\n    forEachField(schema, fn, context, types)\n\n    return schema\n  }\n\n  /**\n   * `forEachField()` shortcut focusing on GraphQLObjectTypes specifically.\n   *\n   * @param {ForEachFieldResolver} fn a callback function that is invoked for\n   * each field of any GraphQLObjectType found\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} either the supplied GraphQLSchema or one generated\n   * to facilitate the task\n   */\n  forEachTypeField(\n    fn: ForEachFieldResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema = null\n  ): GraphQLSchema {\n    let schema = suppliedSchema || this.schema\n\n    forEachField(schema, fn, context, TYPES)\n\n    return schema\n  }\n\n  /**\n   * `forEachField()` shortcut focusing on GraphQLInterfaceType specifically.\n   *\n   * @param {ForEachFieldResolver} fn a callback function that is invoked for\n   * each field of any GraphQLObjectType found\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} either the supplied GraphQLSchema or one generated\n   * to facilitate the task\n   */\n  forEachInterfaceField(\n    fn: ForEachFieldResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema = null\n  ): GraphQLSchema {\n    let schema = suppliedSchema || this.schema\n\n    forEachField(schema, fn, context, INTERFACES)\n\n    return schema\n  }\n\n  /**\n   * `forEachField()` shortcut focusing on GraphQLInputObjectType specifically.\n   *\n   * @param {ForEachFieldResolver} fn a callback function that is invoked for\n   * each field of any GraphQLObjectType found\n   * @param {mixed} context usually an object but any mixed value the denotes\n   * some shared context as is used with the schema during normal runtime.\n   * @param {GraphQLSchema} suppliedSchema an optional schema to use rather\n   * than the one created or stored internally generated from this SDL\n   * @return {GraphQLSchema} either the supplied GraphQLSchema or one generated\n   * to facilitate the task\n   */\n  forEachInputObjectField(\n    fn: ForEachFieldResolver,\n    context: mixed,\n    suppliedSchema: ?GraphQLSchema = null\n  ): GraphQLSchema {\n    let schema = suppliedSchema || this.schema\n\n    forEachField(schema, fn, context, INPUT_TYPES)\n\n    return schema\n  }\n\n  /**\n   * Wrapper for `require('graphql').graphqlSync()` that automatically passes\n   * in the internal `.schema` reference as the first parameter.\n   *\n   * @param {string|Source} query A GraphQL language formatted string\n   * representing the requested operation.\n   * @param {mixed} contextValue a bit of shared context to pass to resolvers\n   * @param {Object} variableValues A mapping of variable name to runtime value\n   * to use for all variables defined in the requestString.\n   * @param {Object|null} The value provided as the first argument to resolver\n   * functions on the top level type (e.g. the query object type).\n   * @param {string} operationName The name of the operation to use if\n   * requestString contains multiple possible operations. Can be omitted if\n   * requestString contains only one operation.\n   * @param {GraphQLFieldResolver<any, any>} fieldResolver A resolver function\n   * to use when one is not provided by the schema. If not provided, the\n   * default field resolver is used (which looks for a value or method on the\n   * source value with the field's name).\n   * @return {ExecutionResult} the requested results. An error is thrown if\n   * the results could not be fulfilled or invalid input/output was specified.\n   */\n  run(\n    query: string | Source,\n    contextValue?: mixed,\n    variableValues?: ?ObjMap<mixed>,\n    rootValue?: mixed,\n    operationName?: ?string,\n    fieldResolver?: ?GraphQLFieldResolver<any,any>\n  ): ExecutionResult {\n    return this.constructor.gql.graphqlSync(\n      this.schema,\n      query,\n      this.resolvers || rootValue,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    )\n  }\n\n  /**\n   * Wrapper for `require('graphql').graphql()` that automatically passes\n   * in the internal `.schema` reference as the first parameter.\n   *\n   * @param {string|Source} query A GraphQL language formatted string\n   * representing the requested operation.\n   * @param {mixed} contextValue a bit of shared context to pass to resolvers\n   * @param {Object} variableValues A mapping of variable name to runtime value\n   * to use for all variables defined in the requestString.\n   * @param {Object|null} The value provided as the first argument to resolver\n   * functions on the top level type (e.g. the query object type).\n   * @param {string} operationName The name of the operation to use if\n   * requestString contains multiple possible operations. Can be omitted if\n   * requestString contains only one operation.\n   * @param {GraphQLFieldResolver<any, any>} fieldResolver A resolver function\n   * to use when one is not provided by the schema. If not provided, the\n   * default field resolver is used (which looks for a value or method on the\n   * source value with the field's name).\n   * @return {Promise<ExecutionResult>} a Promise contianing the requested\n   * results\n   */\n  async runAsync(\n    query: string | Source,\n    contextValue?: mixed,\n    variableValues?: ?ObjMap<mixed>,\n    rootValue?: mixed,\n    operationName?: ?string,\n    fieldResolver?: ?GraphQLFieldResolver<any,any>\n  ): Promise<ExecutionResult> {\n    return this.constructor.gql.graphql(\n      this.schema,\n      query,\n      this.resolvers || rootValue,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    )\n  }\n\n  /**\n   * A little wrapper used to catch any errors thrown when building a schema\n   * from the string SDL representation of a given instance.\n   *\n   * @param {string|Schemata|Source|GraphQLSchema} sdl an instance\n   * of Schemata, a string of SDL, a Source instance of SDL or a GraphQLSchema\n   * that can be printed as an SDL string\n   * @param {boolean} showError true if the error should be thrown, false if\n   * the error should be silently suppressed\n   * @param {BuildSchemaOptions&ParseOptions} schemaOpts for advanced users,\n   * passing through additional buildSchema() options can be done here\n   * @return {GraphQLSchema|null} null if an error occurs and errors are not\n   * surfaced or a valid GraphQLSchema object otherwise\n   */\n  static buildSchema(\n    sdl: string | Source | Schemata | GraphQLSchema,\n    showError: boolean = false,\n    schemaOpts: BuildSchemaOptions & ParseOptions = undefined\n  ): ?GraphQLSchema {\n    try {\n      let source = normalizeSource(sdl)\n\n      return this.gql.buildSchema(source, schemaOpts)\n    }\n    catch (e) {\n      if (showError) { throw e }\n      return null\n    }\n  }\n\n  /**\n   * A little wrapper used to catch any errors thrown when parsing Schemata for\n   * ASTNodes. If showError is true, any caught errors are thrown once again.\n   *\n   * @param {string|Schemata|Source|GraphQLSchema} sdl an instance\n   * of Schemata, a string of SDL, a Source instance of SDL or a GraphQLSchema\n   * that can be printed as an SDL string\n   * @param {boolean} showError if true, any caught errors will be thrown once\n   * again\n   * @return {ASTNode|null} null if an error occurs and errors are suppressed,\n   * a top level Document ASTNode otherwise\n   */\n  static parse(\n    sdl: string | Schemata | Source | GraphQLSchema,\n    showError: boolean = false\n  ): ?ASTNode {\n    try {\n      let source = normalizeSource(sdl)\n\n      return this.gql.parse(source)\n    }\n    catch (e) {\n      if (showError) { throw e }\n      return null\n    }\n  }\n\n  /**\n   * A simple pass thru used within the class to reference graphql methods\n   * and classes.\n   *\n   * @return {mixed} the results of `require('graphql')`\n   */\n  static get gql(): mixed { return require('graphql') }\n\n  /**\n   * Shorthand way of invoking `new Schemata(typeDefs, resolvers)`\n   *\n   * @param {string|Source|Schemata|GraphQLSchema} typeDefs usually a String or\n   * other `toString`'able item\n   * @param {Object} resolvers an object containing field resolvers for\n   * for the schema represented with this string. [Optional]\n   * @return {Schemata} an instance of Schemata\n   */\n  static from(\n    typeDefs: string | Source | Schemata | GraphQLSchema,\n    resolvers: ?Object\n  ): Schemata {\n    return new this(typeDefs, resolvers)\n  }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available type within the schema.\n   *\n   * @type {number}\n   */\n  static get ALL(): number { return ALL }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available type within the schema.\n   *\n   * @type {number}\n   */\n  static get TYPES(): number { return TYPES }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available interface within the schema.\n   *\n   * @type {number}\n   */\n  static get INTERFACES(): number { return INTERFACES }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available enum within the schema.\n   *\n   * @type {number}\n   */\n  static get ENUMS(): number { return ENUMS }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available union within the schema.\n   *\n   * @type {number}\n   */\n  static get UNIONS(): number { return UNIONS }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available scalar within the schema.\n   *\n   * @type {number}\n   */\n  static get SCALARS(): number { return SCALARS }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available root type; Query, Mutation and Subscription\n   *\n   * @type {number}\n   */\n  static get ROOT_TYPES(): number { return ROOT_TYPES }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you wish to iterate\n   * over every available GraphQLInputObjectType within the schema.\n   *\n   * @type {number}\n   */\n  static get INPUT_TYPES(): number { return INPUT_TYPES }\n\n  /**\n   * Constant used with `forEachOf()` that signifies you also wish to\n   * iterate over the meta types. These are denoted by a leading double\n   * underscore.\n   *\n   * Can be OR'ed together such as `Schemata.TYPES | Schemata.HIDDEN`\n   *\n   * @type {number}\n   */\n  static get HIDDEN(): number { return HIDDEN }\n}\n\nexport default Schemata"]}