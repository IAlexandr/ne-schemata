{"version":3,"sources":["../src/ExtendedResolverMap.js"],"names":["ExtendedResolverMap","constructor","config","schema","sdl","resolvers","Symbol","iterator","Object","keys","key","value","bind","from"],"mappings":";;;;;;;AAkBA;;;;;;;;AAQO,MAAMA,mBAAN,CAA0B;;AAK/B;;;;;;;;AAQAC,cAAYC,MAAZ,EAA+C;AAC7C,SAAKC,MAAL,GAAcD,OAAOC,MAArB;AACA,SAAKC,GAAL,GAAWF,OAAOC,MAAlB;AACA,SAAKE,SAAL,GAAiBH,OAAOG,SAAxB;AACD;;AAED;;;;;;;;AAQA,OAAKC,OAAOC,QAAZ,IAAkC;AAChC,WAAQ,aAAa;AAAA;AAAA;AAAA;;AAAA;AACnB,6BAAgBC,OAAOC,IAAP,CAAY,KAAKJ,SAAjB,CAAhB,8HAA6C;AAAA,cAApCK,GAAoC;;AAC3C,gBAAM,EAACA,GAAD,EAAMC,OAAO,KAAKN,SAAL,CAAeK,GAAf,CAAb,EAAN;AACD;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpB,KAJM,CAIJE,IAJI,CAIC,IAJD,CAAP;AAKD;;AAED;;;;;;;AAOA,SAAOC,IAAP,CAAYX,MAAZ,EAAoE;AAClE,WAAO,IAAIF,mBAAJ,CAAwBE,MAAxB,CAAP;AACD;AA5C8B;QAApBF,mB,GAAAA,mB;;AArBb","file":"ExtendedResolverMap.js","sourceRoot":"src","sourcesContent":["// @flow\n\nimport type { GraphQLSchema } from 'graphql'\nimport type { Schemata } from './Schemata'\n\n/**\n * A flow type defining the parameters for creating a new instance of\n * `ExtendedResolverMap`. At least the resolver map is required, but ideally\n * a `.schema` or `.sdl` value are desired\n *\n * @type {ExtendedResolverMapConfig}\n */\nexport type ExtendedResolverMapConfig = {\n  schema?: ?GraphQLSchema,\n  sdl?: (string|Schemata),\n  resolvers: { [string]: string }\n}\n\n/**\n * A class that stores information about a set of resolvers and their\n * associated GraphQLSchema (or the sdl to make one), such that when\n * multiple SDL/Schema merges occur the subsequently merged Schemas have\n * a history of the unbound resolver functiosn from previous merges (in order)\n *\n * @class ExtendedResovlerMap\n */\nexport class ExtendedResolverMap {\n  schema: ?GraphQLSchema\n  sdl: ?(string|Schemata)\n  resolvers: ?{ [string]: string }\n\n  /**\n   * The constructor takes an object with at least SDL or a GraphQLSchema and\n   * a resolver map object of untainted and unbound resolver functions\n   *\n   * @constructor\n   * @param {ExtendedResolverMapConfig} config an object conforming to the\n   * flow type `ExtendedResolverMapConfig` as defined above.\n   */\n  constructor(config: ExtendedResolverMapConfig) {\n    this.schema = config.schema\n    this.sdl = config.schema\n    this.resolvers = config.resolvers\n  }\n\n  /**\n   * A useful iterator on instances of ExtendedResolverMap that yields a\n   * key and value for each entry found in the resolvers object set on this\n   * instance\n   *\n   * @return {Function} a bound generator function that iterates over the\n   * key/value props of the internal .resovlers property\n   */\n  get [Symbol.iterator](): Function {\n    return (function *() {\n      for (let key of Object.keys(this.resolvers)) {\n        yield {key, value: this.resolvers[key]}\n      }\n    }).bind(this)\n  }\n\n  /**\n   * A shorthand way to create a new instance of `ExtendedResolverMap`\n   *\n   * @param {ExtendedResolverMapConfig} config the same config object passed\n   * to the constructor\n   * @return {ExtendedResolverMap} a new instance of `ExtendedResolverMap`\n   */\n  static from(config: ExtendedResolverMapConfig): ExtendedResolverMap {\n    return new ExtendedResolverMap(config)\n  }\n}"]}