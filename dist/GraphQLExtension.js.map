{"version":3,"sources":["../src/GraphQLExtension.js"],"names":["graphQLExtensionHandler","register","module","filename","content","schemata","Schemata","toString","schema","astNode","ast","resolvers","jsFilename","jsModule","replace","require","error","console","process","nextTick","cache","clearSchema","exports","default","sdl","typeDefs","extension","extensions"],"mappings":";;;;;QA2BgBA,uB,GAAAA,uB;QA8CAC,Q,GAAAA,Q;;AAzEhB;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBO,SAASD,uBAAT,CAAiCE,MAAjC,EAAyCC,QAAzC,EAAmD;AACxD,MAAIC,UAAU,sBAAaD,QAAb,CAAd;AACA,MAAIE,WAAW,IAAIC,kBAAJ,CAAaF,QAAQG,QAAR,EAAb,CAAf;AACA,MAAIC,SAASH,SAASG,MAAtB;AACA,MAAIC,UAAUJ,SAASK,GAAvB;AACA,MAAIC,SAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,QAAJ;;AAEA,MAAI;AACFD,iBAAaT,SAASW,OAAT,CAAiB,mBAAQX,QAAR,CAAjB,EAAoC,KAApC,CAAb;AACAU,eAAWE,QAAQ,mBAAQH,UAAR,CAAR,CAAX;AACAD,gBAAYE,SAASF,SAAT,IAAsB,OAAOE,QAAP,IAAmB,QAAnB,IAA+BA,QAAjE;AACD,GAJD,CAKA,OAAOG,KAAP,EAAc;AACZC,YAAQD,KAAR,CAAcA,KAAd;;AAEAE,YAAQC,QAAR,CAAiB,MAAM;AACrB,aAAOJ,QAAQK,KAAR,CAAc,mBAAQR,UAAR,CAAd,CAAP;AACD,KAFD;;AAIAD,gBAAY,IAAZ;AACD;;AAED;AACAN,WAASM,SAAT,GAAqBA,SAArB;AACA,MAAIN,SAASM,SAAb,EAAwB;AACtBN,aAASgB,WAAT;AACAb,aAASH,SAASG,MAAlB;AACD;;AAED;AACA;AACA;AACA;AACAN,SAAOoB,OAAP,GAAiB;AACfb,WADe;AAEfc,aAASlB,QAFM;AAGfM,aAHe;AAIfH,UAJe;AAKfgB,SAAKnB,QALU;AAMfA,YANe;AAOfoB,cAAUpB;AAPK,GAAjB;AASD;;AAEM,SAASJ,QAAT,CAAkByB,YAAY,UAA9B,EAA0C;AAC/CX,UAAQY,UAAR,GAAqBZ,QAAQY,UAAR,IAAsB,EAA3C;AACAZ,UAAQY,UAAR,CAAmBD,SAAnB,IAAgC1B,uBAAhC;AACD;;kBAEcC,Q","file":"GraphQLExtension.js","sourceRoot":"src","sourcesContent":["import { Schemata, stripResolversFromSchema } from './Schemata'\nimport { readFileSync } from 'fs'\nimport { extname, resolve } from 'path'\n\n/**\n * Adds the ability to `require` or `import` files ending in a `.graphql`\n * extension. The exports returned from such an import consist of four\n * major values and one default value.\n *\n * values:\n *   astNode   - an ASTNode document object representing the SDL contents\n *               of the .graphql file contents. Null if the text is invalid\n *   resovlers - if there is an adjacent file with the same name, ending in\n *               .js and it exports either a `resolvers` key or an object by\n *               default, this value will be set on the sdl object as its set\n *               resolvers/rootObj\n *   schema    - a GraphQLSchema instance object if the contents of the .graphql\n *               file represent both valid SDL and contain at least one root\n *               type such as Query, Mutation or Subscription\n *   sdl       - the string of SDL wrapped in an instance of Schemata\n *   typeDefs  - the raw string used that `sdl` wraps\n *   default   - the sdl string wrapped in an instance of Schemata is the\n *               default export\n *\n * @param {Module} module a node JS Module instance\n * @param {string} filename a fully qualified path to the file being imported\n */\nexport function graphQLExtensionHandler(module, filename) {\n  let content = readFileSync(filename)\n  let schemata = new Schemata(content.toString())\n  let schema = schemata.schema\n  let astNode = schemata.ast\n  let resolvers\n  let jsFilename\n  let jsModule\n\n  try {\n    jsFilename = filename.replace(extname(filename), '.js')\n    jsModule = require(resolve(jsFilename))\n    resolvers = jsModule.resolvers || typeof jsModule == 'object' && jsModule\n  }\n  catch (error) {\n    console.error(error)\n\n    process.nextTick(() => {\n      delete require.cache[resolve(jsFilename)]\n    })\n\n    resolvers = null\n  }\n\n  // Assign the resolvers to the sdl string\n  schemata.resolvers = resolvers\n  if (schemata.resolvers) {\n    schemata.clearSchema()\n    schema = schemata.schema\n  }\n\n  // For all intents and purposes this is an object that can be treated like\n  // a string but that also has three extra properties; sdl, ast and schema.\n  // `ast` and `schema` invoke the functions `parse` and `buildSchema` from\n  // the 'graphql' module, respectively\n  module.exports = {\n    astNode,\n    default: schemata,\n    resolvers,\n    schema,\n    sdl: schemata,\n    schemata,\n    typeDefs: schemata\n  }\n}\n\nexport function register(extension = '.graphql') {\n  require.extensions = require.extensions || {}\n  require.extensions[extension] = graphQLExtensionHandler\n}\n\nexport default register\n"]}