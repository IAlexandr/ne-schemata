{"version":3,"sources":["../src/index.js"],"names":["SDL","gql","jestTransformer","register","Schemata","stripResolversFromSchema","TYPEDEFS_KEY"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,wBAAN;;QAMEC,G;QAKAC,e;QAIAC,Q;QAGAC,Q;QAGAJ,G,GAAAA,G;QAGAK,wB;QAGAC,Y","file":"index.js","sourceRoot":"src","sourcesContent":["import { Schemata, stripResolversFromSchema, TYPEDEFS_KEY } from './Schemata'\nimport { register, graphQLExtensionHandler } from './GraphQLExtension'\nimport { gql } from './gqlTagFn'\nimport { jestTransformer } from './jestTransformer'\n\nconst SDL = Schemata\n\nexport {\n  // A template tag function that returns an instance of Schemata rather than a\n  // basic String object. Should work with `babel` syntax highlighting in\n  // Sublime Text, Atom and Visual Studio Code\n  gql,\n\n  // An object containing a `.process` function used with jest in order to\n  // simulate require/import extension in the highly mocked jest test\n  // environment.\n  jestTransformer,\n\n  // Function that, when called, registers '.graphql' as an extension that\n  // `import {} from` and `require` both understand how to load\n  register,\n\n  // The Schemata class itself\n  Schemata,\n\n  // For backwards compatibility\n  SDL,\n\n  // Nice utility function\n  stripResolversFromSchema,\n\n  // Used to make modifications to the string wrapped in an Schemata instance\n  TYPEDEFS_KEY,\n}\n\nexport default Schemata"]}